//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity mapEntity { get { return GetGroup(GameMatcher.Map).GetSingleEntity(); } }
    public MapComponent map { get { return mapEntity.map; } }
    public bool hasMap { get { return mapEntity != null; } }

    public GameEntity SetMap(Map newValue) {
        if (hasMap) {
            throw new Entitas.EntitasException("Could not set Map!\n" + this + " already has an entity with MapComponent!",
                "You should check if the context already has a mapEntity before setting it or use context.ReplaceMap().");
        }
        var entity = CreateEntity();
        entity.AddMap(newValue);
        return entity;
    }

    public void ReplaceMap(Map newValue) {
        var entity = mapEntity;
        if (entity == null) {
            entity = SetMap(newValue);
        } else {
            entity.ReplaceMap(newValue);
        }
    }

    public void RemoveMap() {
        mapEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public MapComponent map { get { return (MapComponent)GetComponent(GameComponentsLookup.Map); } }
    public bool hasMap { get { return HasComponent(GameComponentsLookup.Map); } }

    public void AddMap(Map newValue) {
        var index = GameComponentsLookup.Map;
        var component = CreateComponent<MapComponent>(index);
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceMap(Map newValue) {
        var index = GameComponentsLookup.Map;
        var component = CreateComponent<MapComponent>(index);
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveMap() {
        RemoveComponent(GameComponentsLookup.Map);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMap;

    public static Entitas.IMatcher<GameEntity> Map {
        get {
            if (_matcherMap == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Map);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMap = matcher;
            }

            return _matcherMap;
        }
    }
}
